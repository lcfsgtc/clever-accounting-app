// src/index.js - 重构后的 Cloudflare Worker API 入口文件

// 1. 移除 dotenv。环境变量将通过 Worker 的 env 对象自动注入。
// require("dotenv").config(); // <-- 这行代码在这里被移除

// 2. 导入必要的模块，全部使用 ES 模块语法。
// 注意：Node.js 内置模块需要使用 'node:' 前缀导入。
// 这些模块的可用性依赖于 wrangler.toml 中启用的 'nodejs_compat' 兼容性标志。
// === 核心修改: 导入 Mongoose 的所有导出，并使用一个描述性的命名空间 ===
import * as MongooseNamespace from 'mongoose'; 
import { Router } from 'itty-router';
import { URLPattern } from 'urlpattern-polyfill'; // 用于 Workers 的 URL 路由匹配
import { parse as parseQueryString } from 'qs'; // 替换 Node.js 的 querystring，更常用且健壮
import { Parser as Json2csvParser } from 'json2csv'; // 用于 CSV 导出，需要确保其在 Worker 环境中的兼容性

// 导入 apiContext，它包含 mongoose, bcryptjs, jwt 等共享工具
import apiContext from './utils/apiContext.js';

// 初始化 Router
const router = Router();

// 4. 数据库连接状态管理
let isDbConnected = false;

// 5. 数据库连接函数
async function connectDb(env) {
    // 检查连接是否已就绪。这里使用 MongooseNamespace.connection 来访问连接状态。
    // 注意：如果 MongooseNamespace.connection 在此阶段未完全初始化，可能需要更健壮的检查。
    if (isDbConnected && MongooseNamespace.connection && MongooseNamespace.connection.readyState === 1) { 
        console.log('MongoDB already connected.'); 
        return;
    }
    // 检查 MONGO_URI 是否存在
    if (!env.MONGO_URI) {
        console.error('Error: MONGO_URI is not defined in environment variables.');
        throw new Error('MONGO_URI is missing. Cannot connect to database.');
    }    
    try {
        console.log('Attempting to connect to MongoDB with URI: URI_PROVIDED'); 
        
        let actualMongooseConnect = null;
        let mongooseInstanceForModels = null; // 用于设置apiContext.mongoose

        // === 核心逻辑：确定正确的 Mongoose 实例和 connect 函数 ===

        // 诊断日志：打印 MongooseNamespace 的所有属性和类型
        console.log('--- Diagnosing MongooseNamespace ---');
        for (const key in MongooseNamespace) {
            console.log(`MongooseNamespace.${key}: ${typeof MongooseNamespace[key]}`);
            if (typeof MongooseNamespace[key] === 'function' && key.toLowerCase().includes('connect')) {
                console.log(`>>> POTENTIAL CONNECT FUNCTION FOUND AT MongooseNamespace.${key}`);
            }
        }

        // 诊断日志：打印 MongooseNamespace.default 的所有属性和类型 (如果存在)
        if (MongooseNamespace.default) {
            console.log('--- Diagnosing MongooseNamespace.default ---');
            for (const key in MongooseNamespace.default) {
                console.log(`MongooseNamespace.default.${key}: ${typeof MongooseNamespace.default[key]}`);
                if (typeof MongooseNamespace.default[key] === 'function' && key.toLowerCase().includes('connect')) {
                    console.log(`>>> POTENTIAL CONNECT FUNCTION FOUND AT MongooseNamespace.default.${key}`);
                }
            }
        }
        console.log('------------------------------------');

        // 尝试从 MongooseNamespace.default 获取 connect
        if (MongooseNamespace.default && typeof MongooseNamespace.default.connect === 'function') {
            actualMongooseConnect = MongooseNamespace.default.connect;
            mongooseInstanceForModels = MongooseNamespace.default;
            console.log('Strategy 1: Found connect on MongooseNamespace.default');
        } 
        
        // 如果上面没找到，尝试从 MongooseNamespace 根部获取 connect
        if (!actualMongooseConnect && typeof MongooseNamespace.connect === 'function') {
            actualMongooseConnect = MongooseNamespace.connect;
            mongooseInstanceForModels = MongooseNamespace;
            console.log('Strategy 2: Found connect on MongooseNamespace directly');
        }

        // 如果仍未找到 connect 函数，进行最终检查并抛出错误
        if (!actualMongooseConnect) {
            console.error('Mongoose connect function not found after all checks.');
            // 再次打印完整对象结构，确保没有遗漏
            console.log('MongooseNamespace (full object details):', JSON.stringify(MongooseNamespace, (key, value) => {
                // 替换函数为占位符，避免循环引用和巨大输出
                if (typeof value === 'function') return '[Function]'; 
                return value;
            }, 2));
            if (MongooseNamespace.default) {
                console.log('MongooseNamespace.default (full object details):', JSON.stringify(MongooseNamespace.default, (key, value) => {
                    if (typeof value === 'function') return '[Function]';
                    return value;
                }, 2));
            }
            throw new Error('Mongoose connection function could not be resolved. Please check Mongoose version and Cloudflare Worker compatibility.');
        }

        // 尝试连接
        await actualMongooseConnect(env.MONGO_URI);
        console.log('Connected to MongoDB successfully.');
        isDbConnected = true;

        // 设置 apiContext 中的 mongoose 实例，这对于模型使用诸如 Types.ObjectId 等功能至关重要
        if (mongooseInstanceForModels) {
            apiContext.mongoose = mongooseInstanceForModels;
            console.log('apiContext.mongoose set to resolved Mongoose instance.');
        } else {
            // 回退到 MongooseNamespace 作为 apiContext.mongoose，可能功能不全但至少存在
            apiContext.mongoose = MongooseNamespace;
            console.warn('Could not definitively determine primary Mongoose instance for apiContext. Falling back to MongooseNamespace. Check if Types.ObjectId works correctly.');
        }

    } catch (err) {
        console.error('MongoDB connection error:', err);
        isDbConnected = false;
        console.error('MongoDB connection full error object:', JSON.stringify(err, Object.getOwnPropertyNames(err)));        
        throw new Error('Database connection failed. Please check MONGO_URI and network access.');
    }
}

// 9. API 路由定义 (替换 Express 路由)
// 导入重构后的具体路由文件
import { authRoutes } from './routes/auth-api.js';
import { expenseRoutes } from './routes/expense-api.js';
import { incomeRoutes } from './routes/income-api.js';
import { assetRoutes } from './routes/asset-api.js';
import { diaryRoutes } from './routes/diary-api.js';
import { booknoteRoutes } from './routes/booknote-api.js';


const apiRoutes = [
    ...authRoutes,
    ...expenseRoutes,
    ...incomeRoutes,
    ...assetRoutes,
    ...diaryRoutes,
    ...booknoteRoutes,

    // 仪表板 API (不再渲染 HTML，而是返回数据)
    { method: 'GET', pattern: '/api/dashboard', handler: async (request, env) => {
        const authCheck = await apiContext.requireLogin(request, env, apiContext.Models);
        if (authCheck) return authCheck; // 未登录则返回错误响应

        const userId = request.userId;

        try {
            let totalUsers = 0;
            if (request.isAdmin) {
                totalUsers = await apiContext.Models.User.countDocuments();
            }

            // 确保这里使用 apiContext.mongoose.Types.ObjectId
            const totalExpenses = await apiContext.Models.Expense.aggregate([
                { $match: { userId: apiContext.mongoose.Types.ObjectId(userId) } },
                { $group: { _id: null, total: { $sum: "$amount" } } }
            ]);
            const totalIncomes = await apiContext.Models.Income.aggregate([
                { $match: { userId: apiContext.mongoose.Types.ObjectId(userId) } },
                { $group: { _id: null, total: { $sum: "$amount" } } }
            ]);

            const latestExpenses = await apiContext.Models.Expense.find({ userId: userId }).sort({ date: -1 }).limit(5).lean();
            const latestIncomes = await apiContext.Models.Income.find({ userId: userId }).sort({ date: -1 }).limit(5).lean();

            const totalDiaries = await apiContext.Models.Diary.countDocuments({ userId: userId });
            const totalBooknotes = await apiContext.Models.Booknote.countDocuments({ userId: userId });

            const totalAssets = await apiContext.Models.Asset.countDocuments({ userId: userId });
            const totalCurrentValue = await apiContext.Models.Asset.aggregate([
                { $match: { userId: apiContext.mongoose.Types.ObjectId(userId) } },
                { $group: { _id: null, total: { $sum: "$currentValue" } } }
            ]);

            return new Response(JSON.stringify({
                message: `欢迎来到 API 仪表板, 用户 ${request.userId}!`,
                userId: request.userId,
                isAdmin: request.isAdmin,
                stats: {
                    totalUsers: request.isAdmin ? totalUsers : undefined,
                    totalExpenses: totalExpenses[0] ? totalExpenses[0].total : 0,
                    totalIncomes: totalIncomes[0] ? totalIncomes[0].total : 0,
                    latestExpenses,
                    latestIncomes,
                    totalDiaries,
                    totalBooknotes,
                    totalAssets,
                    totalCurrentAssetValue: totalCurrentValue[0] ? totalCurrentValue[0].total : 0,
                }
            }), { headers: { 'Content-Type': 'application/json' } });
        } catch (error) {
            console.error('Dashboard API error:', error);
            return new Response(JSON.stringify({ message: 'Server error fetching dashboard data' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
        }
    }},
];


// 10. Worker 的主入口：fetch 处理函数
export default {
    async fetch(request, env, ctx) {
        try {
            await connectDb(env);
        } catch (error) {
            console.error("Initial DB connection failed in fetch handler:", error);
            return new Response(JSON.stringify({ message: 'Service Unavailable: Database connection failed' }), { status: 503, headers: { 'Content-Type': 'application/json' } });
        }

        const url = new URL(request.url);

        for (const route of apiRoutes) {
            const pattern = new URLPattern({ pathname: route.pattern });
            const match = pattern.exec(url);

            if (match && request.method === route.method) {
                request.params = match.pathname.groups;
                try {
                    return await route.handler(request, env, apiContext);
                } catch (handlerError) {
                    console.error(`Error in route ${route.method} ${route.pattern}:`, handlerError);
                    return new Response(JSON.stringify({ message: 'Internal Server Error' }), { status: 500, headers: { 'Content-Type': 'application/json' } });
                }
            }
        }

        return new Response(JSON.stringify({ message: 'API Route Not Found' }), { status: 404, headers: { 'Content-Type': 'application/json' } });
    },
};
